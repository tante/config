from kuwawi.verkauf.project_forms import *
f = ProjectDateForm()
f.is_valid()
f = ProjectDateForm({"date_of_receit":"2008-05-15"})
f.is_valid()
from datetime import datetime
now = datetime.now()
now.strftime("Y-m-d")
now.strftime("%Y-%m-%d")
y
from kuwawi.verkauf.models import *
p = Project.objects.get(pk=12)
p
p.billing_address
p.billing_address.street
p.billing_address.zip
p.billing_address.city
p.billing_address.pobox
y
import os
os.exec("aplay ~/bin/saberup.wav")
os.execl("aplay ~/bin/saberup.wav")
os.system
help(os.system)
os.system("aplay ~/bin/saberup.wav")
os.system("aplay ~/bin/saberdown.wav")
top
y
a ={}
a.get("print",False)
y
from verkauf.models import *
Company.objects.get(pk=1)
comp = Company.objects.get(pk=1)
comp.get_locations
comp.get_locations()
y
from verkauf.models import *
comp = Company.objects.get(pk=1)
comp.get_locations()
a = ["a","b","c"]
b = ""
b.join()
b.join(a)
y
from verkauf.models import *
comp = Company.objects.get(pk=1)
comp.get_locations()
y
from verkauf.models import *
comp = Company.objects.get(pk=1)
comp.get_locations()
n
y
from verkauf.models import *
comp = Company.objects.get(pk=1)
copm
comp
y
from verkauf.models import *
Offer.objects.all()
of = Offer.objects.all()[0]
of.offerconditions
y
from verkauf.models import *
of = Offer.objects.all()[0]
of.save()
of.offerconditions
OfferConditions(offer=of)
OfferConditions(offer=of).save()
of.offerconditions
of.save()
y
from verkauf.models import *
of = Offer.objects.all()[0]
of.offerconditions
y
from verkauf.models import *
of = Offer.objects.all()[1]
of.offerconditions
of.save()
yy
y
from verkauf.models import *
of = Offer.objects.all()[1]
of.save()
of.offerconditions()
of.offerconditions
n
for i in  Offer.objects.all():
    i.save()
of = Offer.objects.all()[5]
of.offerconditions
n
of.offerconditions
of = Offer.objects.get(pk=11)
of.offerconditions.lackierung
of.offerconditions.delete()
of.save()
of.offerconditions
of.offerconditions.save()
of.offerconditions.initialized
of.offerconditions.initialized = 0
of.offerconditions.save()
of.offerconditions.initialized 
of.offerconditions.initialized = 0
of.offerconditions.save()
y
from verkauf.models import *
proj = Project.objects.get(pk=26)
proj
proj.people
proj.get_people()
from verkauf.models import *
proj = Project.objects.get(pk=26)
proj.get_people()
from verkauf.models import *
proj = Project.objects.get(pk=26)
proj.get_people()
from verkauf.models import *
proj = Project.objects.get(pk=26)
proj.get_people()
from verkauf.models import *
proj = Project.objects.get(pk=26)
proj.get_people()
proj.marked_person
proj.marked_person.id
from verkauf.models import *
proj = Project.objects.get(pk=26)
proj.get_people()
from verkauf.models import *
for proj in  Project.objects.all():
    proj.people.add(proj.personal_contact)
    
for proj in  Project.objects.all():
    proj.people.add(proj.person_contact)
    
for proj in  Project.objects.all():
    if proj.person_contact:proj.people.add(proj.person_contact)
    
for proj in  Project.objects.all():
    if proj.person_contact:proj.people.add(proj.person_contact)
    
from verkauf.models import *
from verkauf.project_forms import *
ProjectDateForm()
f = ProjectDateForm()
f.fields
f.fields.keys()
for i in f.fields:
    print i
    
f.fields
f.fields[0]
f.fields['date_of_receit']
field = f.fields['date_of_receit']
field.label
field.help_text
field.creation_counter
field.widget
field.widget()
field.widget.render()
f.fields['date_of_receit']
str(f.fields['date_of_receit'])
repr(f.fields['date_of_receit'])
f
for field in form
for field in form:
    print field
    
for field in f:
    print field
    
form['date_of_receit']
f['date_of_receit']
bf = f['date_of_receit']
bf.as_text
bf.as_text()
from verkauf.project_forms import *
fields = (('date_of_receit ','Eingangsdatum'),
            ('number','Vorgangsnummer'),
            ('name','Vorgangsname'),
            ('company_contact','Kunde'),
            )
f = ListFilterForm(fields)
f
f.get_statefields()
f.get_statefields()[0]
str(f.get_statefields()[0])
str(f.get_statefields()[0].name)
var = str(f.get_statefields()[0].name)
var[-6:)
var[-6:]
var[6:]
f
f.as_p
f.as_p()
f['order_by']
f['order_by'].value
f['order_by']
f['order_by'].as_p
field = f['order_by'].
field = f['order_by']
field.
field.as_text
field.as_text()
field._data
field._data()
f['order_by']._data
f['order_by']._data()
f = ListFilterForm(fields,{"order_by":"date_of_receit"})
f['order_by']._data()
f.get('order_by)
f.get('order_by')
var = str(f.get_statefields()[0].name)
f['order_by']
f['order_by']._data
f['order_by']._data()
f.get_statefields()
fields = f.get_statefields()
bf = fields[0]
bf._data
bf.data
from kuwawi.verkauf.models import *
Project.objects.filter().oder_by("-name")
Project.objects.filter().order_by("-name")
for p in Project.objects.filter().order_by("-name"):
    print p.name
    
for p in Project.objects.filter().order_by("name"):
    print p.name
    
for p in Project.objects.filter().order_by("name"):
    print p.name
    
for p in Project.objects.filter(state__in=[3]).order_by("name"):
    print p.name
    
for p in Project.objects.filter(state__in=[3]).order_by("-name"):
    print p.name
    
from kuwawi.verkauf.models import *
Inquiry.objects.all()
Offer.objects.filter(project__deleted=False)
Offer.objects.filter(project__deleted=False).distict()
Offer.objects.distinct(project__deleted=False).
Offer.objects.distinct(project__deleted=False)
Offer.objects.distinct()
Offer.objects.all().extra(params={'limit': '1'})
Offer.objects.all())
Offer.objects.all()
basedir
import os
os.basedir(__file__)
os.path.basedir
import os.path
os.path.basename(__file__)
import os
help(os.system)
from datetime import datetime
now = datetime.now()
now.strftime("%y")
from kuwawi.verkauf.models import *
for p in Project.objects.all():
    print p.number
    
for p in Project.objects.all():
    print p.number[2:]
    
for p in Project.objects.all():
    p.number = p.number[2:]
    p.save()
    
for p in Project.objects.all():
    print p.number[2:]
    
for p in Offer.objects.all():
    print p.number[2:]
    
for p in Offer.objects.all():
    p.number = p.number[2:]
    p.save()
    
for p in Inquiry.objects.all():
    p.number = p.number[2:]
    p.save()
    
for p in Contract.objects.all():
    p.number = p.number[2:]
    p.save()
    
from kuwawi.verkauf.models import *#
from kuwawi.verkauf.models import *
a = CommonTechData
p = MachineTechData.objects.all()[0]
p
p.getattr
p.__getattr__("spulenspektrum")
p.__getattribute__("spulenspektrum")
p.spulenspektrum
p.__setattribute__("spulenspektrum","test")
p.__setattr__("spulenspektrum","test")
p.__getattribute__("spulenspektrum")
from kuwawi.verkauf.machines_forms import *
FullMachineTechDataForm()
FullMachineTechDataForm().as_p()
from kuwawi.verkauf.project_forms import *
FullProjectTechDataForm().as_p()
p.__getattribute__("spulenspektrum")
p.__setattr__("spulenspektrum",u"test")
p.__getattribute__("spulenspektrum")
str(p.__getattribute__("spulenspektrum"))
1900+1280
class history(list):
    pass
a = history()
a.insert
a.insert("a")
a.insert("a",1)
a.insert(1,"a")
a
a.insert(1,"b")
a
a.insert(1,"c")
a
a.count()
a.count
a.count(a)
a.count()
help(a.count)
a.__len(__)
a.__len__()
help(a.pop)
import thinkwhack
thinkwhack.ThinkWhack.History()
hist = thinkwhack.ThinkWhack.History()
hist.pop()
import thinkwhack
hist = thinkwhack.ThinkWhack.History()
hist.pop()
import thinkwhack
hist = thinkwhack.ThinkWhack.History()
hist.pop()
import thinkwhack
hist = thinkwhack.History()
hist.pop()
hist.append("a")
hist
hist.pop()
hist
hist.append("a")
hist.pop()
hist.append("a")
hist.append("b")
hist.append("c")
hist.append("d")
hist.pop()
import thinkwhack
hist = thinkwhack.History()
hist = thinkwhack.History(1)
hist.append("a")
import thinkwhack
hist = thinkwhack.History(1)
hist.append("a")
import thinkwhack
hist = thinkwhack.History(1)
hist.append("a")
a = ["a","b","c"]
help(a.reverse)
help a.sort
b=a
b.reverse()
b
a
clone
copy
a.in
a.index
a.index()
a.index(1)
a.index("a")
xrange(len(a)-1,0)
xrange(len(a)-1)
list(xrange(len(a)-1,0))
list(xrange(len(a)-1))
list(xrange(len(a)))
xrange(len(a)).reverse()
help xrange
xrange(2,1,1)
xrange(2,1,2)
xrange(2,1,4)
xrange(2,1,-1)
list(xrange(2,1,-1))
list(xrange(3,1,-1))
list(xrange(3,0,-1))
list(xrange(3,-1,-1))
list(xrange(len(a),-1,-1))
list(xrange(len(a)-1,-1,-1))
list(xrange(len(a)-1,-1))
list(xrange(len(a)-1,-1,-1))
list(xrange(len(a)1,-1,1))
list(xrange(len(a),-1,1))
list(xrange(len(a),-1,-1))
list(xrange(len(a),0,-1))
import thinkwhack
hist = thinkwhack.History
hist = thinkwhack.History()
hist
hist = thinkwhack.History(2)
hist.append(1)
hist.append(2)
hist
hist.append(3)
hist
hist.get_reversed()
import thinkwhack
hist = thinkwhack.History(2)
hist.append(1)
hist.append(2)
hist.get_reversed()
import thinkwhack
hist = thinkwhack.History(2)
hist.append(1)
hist.append(2)
hist.get_reversed()
import thinkwhack
hist = thinkwhack.History(4)
hist.append(1)
hist.append(2)
hist.append(3)
hist.append(4)
hist[1]
hist[1:2]
hist[1:1]
hist[:1]
hist[:-1]
hist[-1]
hist[1:3]
hist[1:4]
z = hist[1:4]
for i in z
for i in z:
    print i
    
z.index
for i in xrange(len(z)):
    print i
    
z
z[:2
]
z[:3
]
z[:8]
hist
help hist.remove
list(xrange(len(hist))
list(xrange(len(hist)))
hist
import time
time.sleep()
time.sleep(250)
help time.sleep
time.sleep(1)
from kuwawi.verkauf.models import Project
p = Project.objects.all()[0]
from kuwawi.verkauf.models import Project
from kuwawi.verkauf.models import *
Machine.objects.get(pk=15)
mach = Machine.objects.get(pk=15)
mach.tech_data.get_german_data()
mach.tech_data.get_english_data()
import thinkwhack
thinkwhack = thinkwhack.ThinkWhack()
gtk.main()
import pygtk
import gtk
gtk.main()
import thinkwhack
thinkwhack.ThinkWhack
thinkwhack.ThinkWhack()
tw = thinkwhack.ThinkWhack()
thinkwhack.main()
import thinkwhack
thinkwhack.main()
import thinkwhack
import configobj
conf = configobj.ConfigObj()
conf['key'] = "val"
conf.write()
conf['key2'] = "val2"
conf['key3'] = "val3"
conf['key4'][1] = "val4.1"
conf['key4']["1"] = "val4.1"
conf['key4'] = None
conf['key4']["1"] = "val4.1"
conf['key4'] = "Heading"
conf['key4']["1"] = "val4.1"
conf['key4'] = "Heading"
conf.write()
conf.write("/tmp/.test/")
conf.write("/tmp/.test")
conf.filename = "/tmp/.test"
conf.write()
import pygtk
import gtk
gtk.STOCK_MEDIA_STOP
a = gtk.STOCK_MEDIA_STOP
a.title
a.title()
a.index
a.index()
type(a)
a = gtk.STOCK_MEDIA_STOP
type(a)
gtk.stock_lookup("Gtk-Media-Stop")
gtk.stock_lookup("STOCK_MEDIA_STOP")
gtk.stock_list_ids()
gtk.stock_lookup("gtk-media-play")
a = gtk.ImageMenuItem(gtk.STOCK_MEDIA_STOP)
a
a = gtk.ImageMenuItem(gtk.STOCK_MEDIA_STOP,label="test")
a  = [1,2,3]
a
help a.pop
help a.remove
import thinkwhack
hist = thinkwhack.History(4)
hist.append(1)
hist
hist.clear()
hist
import pdb
import thinkwhack
pdb.run("thinkwhack.main()")
continue
import thinkwhack
thinkwhack.main()
pdb.run('thinkwhack.main()')
continue
import NotImplementedError
NotImplementedError
NotImplementedError()
import actions
actions.__dict__
actions.__hash__()
uri = "/usr/share/sounds/test.wav"
uri.startswith("file://")
import HttpServer
import Httpserver
import httpserver
import httplib
import BaseHttpServer
import SimpleHTTPServer
thing = ((0,"AAA"),(1,"BBB"))
for i in thing:
    i[0]
    
import datetime
datetime.datetime.now()
help "".replace
from django.newforms import *
import django.newforms as forms
forms.widgets.RadioSelect()
from kuwawi.verkauf.project_forms import *
f = PrintDialog()
f.as_table()
from kuwawi.verkauf.models import *
proj = Project.objects.all()[0]
proj
from kuwawi.verkauf.offer_forms import *
OfferAddForm(proj)
OfferAddForm(proj).as_table()
from kuwawi.verkauf.models import *
proj = Project.objects.all()[0]
from kuwawi.verkauf.offer_forms import *
OfferAddForm(proj).as_table()
Offer.objects.filter(project=proj)
from kuwawi.verkauf.offer_forms import *
from kuwawi.verkauf.models import *
proj = Project.objects.all()[0]
OfferAddForm(proj).as_table()
Offer.objects.all()
Offer.objects.all()[2]
Offer.objects.all()[2].project
Offer.objects.all()[2].project.id
from kuwawi.verkauf.models import *
from kuwawi.verkauf.offer_forms import *
Offer.objects.all()[2].project.id
OfferAddForm(proj).as_table()
OfferAddForm().as_table()
from kuwawi.verkauf.models import *
proj = Project.objects.all()[0]
OfferAddForm(proj).as_table()
from kuwawi.verkauf.offer_forms import *
from kuwawi.verkauf.models import *
proj = Project.objects.all()[0]
from kuwawi.verkauf.offer_forms import *
OfferAddForm(proj).as_table()
from kuwawi.verkauf.offer_forms import *
from kuwawi.verkauf.models import *
proj = Project.objects.all()[0]
OfferAddForm(proj).as_table()
from kuwawi.verkauf.models import *
proj = Project.objects.all()[0]
from kuwawi.verkauf.offer_forms import *
OfferAddForm(proj).as_table()
from kuwawi.verkauf.models import *
proj = Project.objects.all()[0]
from kuwawi.verkauf.models import *
from kuwawi.verkauf.offer_forms import *
OfferAddForm(proj).as_table()
from kuwawi.verkauf.offer_forms import *
from kuwawi.verkauf.models import *
proj = Project.objects.all()[0]
from kuwawi.verkauf.offer_forms import *
OfferAddForm(proj).as_table()
from kuwawi.verkauf.models import *
proj = Project.objects.all()[0]
from kuwawi.verkauf.offer_forms import *
OfferAddForm(proj).as_table()
from kuwawi.verkauf.offer_forms import *
from kuwawi.verkauf.models import *
proj = Project.objects.all()[0]
OfferAddForm(proj).as_table()
class test(object):
    HELLO = "hello"
    
a = test()
a.HELLO
class test(object):
    HELLO = "hello"
    def func(self):
        print HELLO
        
a.HELLO
a = test()
a.func
a.func()
a.__class__.HELLO
from kuwawi.verkauf.tech_data_forms import *
WicklerForm()
from kuwawi.verkauf.tech_data_forms import *
WicklerForm()
a  = WicklerForm()
a.as_p()
a  = WicklerForm({"Produktlaufrichtung":"Linksrum"})
a
a.as_p()
from kuwawi.verkauf.tech_data_forms import *
HorizontalspeicherForm()
HorizontalspeicherForm().as_p()
a  = WicklerForm()
a.as_p()
from kuwawi.verkauf.tech_data_forms import *
HorizontalspeicherForm().as_p()
from kuwawi.verkauf.tech_data_forms import *
HorizontalspeicherForm().as_p()
a = HorizontalspeicherForm()
a.fields
a.as_ul()
a.fields
a.fields[0]
a.fields["Produkte"]
prod = a.fields["Produkte"]
prod
prod()
import django.newforms as forms
z = forms.CharField(max_length=10)
a.fields.keys
a.fields.keys[0]
a.fields.keys()
a.fields.keys()[0]
a.fields[0]
a.fields
a.fields['Produkt']
a.fields[u'Produkt']
a.fields[u'Produktlaufrichtung']
a.fields['Produktlaufrichtung']
field = a.fields['Produktlaufrichtung']
field.clean()
field
field[0]
a.fields['Produktlaufrichtung']
ls
ipyth
import actions
actions.__dic__
actions.__dict__
actions.__class__
actions.__dict__
for klass in actions.__dict__:
    
instance_of
isinstance(actions.rotator)
isinstance(actions.rotator,actions.Action)
issubclass(actions.RotateAction,actions.Action)
issubclass(actions.Action,actions.Action)
__dict__
actions.__dict__
issubclass
ls
___
__
__import__
__import__()
__name__
__name__.__dict__
import actions
actions.get_actions()
type("__")
type(actions.Action)
type(actions.Action)==type
type(actions.Action)==""
import actions
actions.get_actions()
actions.get_actions()[2].__class__
a = actions.get_actions()[2]
a.__name__
import actions
actions.get_actions()
import thinkwhack
from kuwawi.verkauf.tech_data_forms import *
FormchooserForm()
f = FormchooserForm()
f.as_p()
from kuwawi.verkauf.tech_data_forms import *
get_form_for_name("WicklerForm")
form = get_form_for_name("WicklerForm")()
form["Produktlaufrichtung"]
form["Produktlaufrichtung"].render()
f = form["Produktlaufrichtung"]
f
f.as_widget()
f
form
form.as_table()
f
f.field()
f.field
f.field.widget
f.field.widget()
f.field.widget.render()
f.field.widget.render
f.field.widget
f.field.widget()
f
a = {"a": 1}
a.pophelp 
help a.pop
help a.popitem
help a.pop
from kuwawi.verkauf.models import ProjectTechDataEntry
ProjectTechDataEntry.objects.all()
from kuwawi.verkauf.models import *
ProjectTechDataSet.objects.all()
for i in ProjectTechDataSet.objects.all():
    i.delete()
    
for i in ProjectTechDataEntry.objects.all():
    i.delete()
    
a="abcd"
a[30:]
a[:30]
ProjectTechDataSet.objects.all()
from kuwawi.verkauf.models import *
ProjectTechDataSet.objects.all()
ProjectTechDataSet.objects.get(project=7,description="Wickel121")
ProjectTechDataSet.objects.all()[0].project
p = ProjectTechDataSet.objects.all()[0].project
ProjectTechDataSet.objects.get(project=p,description="Wickel121")
ProjectTechDataSet.objects.get(project=p,description="Wickel11")
a = {}
a.items
a.items()
a = {"a":1}
b = {"b":2}
a+b
from kuwawi.verkauf.models import *
from kuwawi.verkauf.tech_data_forms import *
ProjectTechDataSet.objects.get(pk=6)
tds = ProjectTechDataSet.objects.get(pk=6)
f = WicklerForm(resource=tds)
f
f.as_table()
from datetime import timedelta
timedelta(seconds=30)
delta = timedelta(seconds=30)
delta.seconds
delta.days
delta = timedelta(seconds=14290010)
delta.days
delta.mins
delta.min
delta.seconds
delta.resolution
help delta.resolution
class Test(object):
    def method(self):
        print "Called"
        
t = Test()
t.__getattribute__("method")
t.__getattribute__("method")()
t.__getattribute__("meth")()
t.__getattribute__("meth")
t.__getattribute__("meth",None)
t.__dict__
t.__hash__
t.__hash__()
t.__doc__
t.__getattribute__("method")
a = t.__getattribute__("method")
a.__call__
class Test(object):
    def method(self):
        print "Called"
class Test(object):
    def method(self):
        print "Called"
    thingy = "1"
    
t = Test()
a = t.__getattribute__("method")
a = t.__getattribute__("thingy")
a
a.__call__
a = {}
a.__getattribute__
a.__getattribute__.__cmp__
a.__getattribute__.__cmp__()
a.__getattribute__.__cmp__("a")
a = "abcdef"
list(a)
b = 1
list(b)
def incre(a):
    a = a+1
    yield a
    
incre(2)
incre(2)()
thingy  =incre(2)
thingy.next()
thingy  =incre(6)
thingy.next()
def func(listy):
    for i in listy:
        
a = [1,2,3]
for t in a:
    print a
    
for t in a:
    print t
    
a = ""
a.upper
a.upper()
import string
string.uppercase
a = 2 if True else 3
a
a = 2 if False else 3
a
from kuwawi.verkauf.models import *
Machine.objects.get(pk=15)
mach = Machine.objects.get(pk=15)
mach.data
mach.data.all()
mach.data.filter(text__isnull=False)
mach.data.filter()
mach.data.filter()[4]
mach.data.filter()[4].text
mach.data.filter(text__gt=1)
mach.data.filter(text__gt=0)
from django.db.models import Q
mach.data.filter(~Q(text__exact=u""))
mach.data.filter(~text__exact=u"")
mach.data.filter(~Q(text__exact=u""))
a = {'label': 2 if True else 3}
a
mach = Machine.objects.get(pk=15)
from kuwawi.verkauf.models import *
mach = Machine.objects.get(pk=15)
mach.get_englisch_data()
from kuwawi.verkauf.models import *
mach = Machine.objects.get(pk=15)
mach.get_englisch_data()
from kuwawi.verkauf.models import *
mach = Machine.objects.get(pk=15)
mach.get_englisch_data()
mach.get_deutsch_data()
mach.get_german_data()
proj = Project.objects.get(pk=25)
proj
proj = Project.objects.get(pk=26)
proj
proj.get_offer_subdir()
from kuwawi.verkauf.models import *
proj = Project.objects.get(pk=26)
proj.get_offer_subdir()
a = "abc"
a.startswith("a")
rand
import rand
import random
randint
import random
random.randint()
random.randint(0,1)
random.randint(0,100)
from kuwawi.verkauf.models import *
for offer in Offer.objects.all():
    offer.save()
    
for offer in Offer.objects.all():
    offer.save()
    
from kuwawi.verkauf.models import *
p = Project.objects.get(pk=26)
p
p.offers
p.offers.all()[]
p.offers.all()
p.offers.all()[1]
p.offers.order_by("-creation_date")
p.offers.order_by("-creation_date")[0]
p.offers.order_by("-creation_date")[6]
p.offers.order_by("-creation_date")[0]
a = []
a[0]
p.notes
p.notes.all()
p.notes.all()[0]
import datetime
datetime.timedelta
a = datetime.timedelta(days=21)
a
now = datetime.datetime.now()
now-a
now+a
p.notes.all()[0].creation_date
note = p.notes.all()[0]
now
print (note.creation_date < now-a)
print (note.creation_date > now-a)
p.offer_sent
p.offer_sent()
p.offer_sent
from kuwawi.verkauf.models import *
p=Project.objects.get(pk=26)
p
p.needs_attention()
p=Project.objects.get(pk=26)
from kuwawi.verkauf.models import *
p=Project.objects.get(pk=26)
p.needs_attention()
from kuwawi.verkauf.models import *
p=Project.objects.get(pk=6)
p.needs_attention()
from kuwawi.verkauf.models import *
p=Project.objects.get(pk=6)
p.needs_attention()
from kuwawi.verkauf.models import *
o = Offer.objects.get(pk=3)
o.empty_commercial()
o.empty_textblocks()
from kuwawi.verkauf.models import *
o = Offer.objects.get(pk=3)
o.empty_technical()
o.empty_commercial()
o.empty_textblocks()
from kuwawi.verkauf.models import *
mach = Machine.objects.get(pk=17)
mach.attachments.all()
mach.attachments.all()[0]
att = mach.attachments.all()[0]
att.path
from kuwawi.verkauf.models import *
mach = Machine.objects.all()[0]
mach.preview
import shutil
a = ""
a = "abcdefg"
a.replace("cde","123")
a
import os
import stat
os.stat("/tmp")
os.stat("/tmpa")
from kuwawi.verkauf.models import *
mach = Machine.objects.get(pk=15)
mach
import shutil
import os
os.makedirs("/tmp/test1/test2")
os.makedirs(u"/tmp/test1/test2")
os.makedirs(u"/tmp/test1/test3")
